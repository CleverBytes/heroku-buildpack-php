name: Platform packages sync from -develop/ to -stable/
run-name: Sync${{ inputs.dry-run == true && ' dry-run' || '' }} from dist-$STACK-develop/ to dist-$STACK-stable/

on:
  workflow_dispatch:
    inputs:
      stack-heroku-20:
        description: 'Sync heroku-20 packages'
        type: boolean
        default: true
        required: false
      stack-heroku-22:
        description: 'Sync heroku-22 packages'
        type: boolean
        default: true
        required: false
      dry-run:
        description: 'Only list package changes, without syncing'
        type: boolean
        default: false
        required: false

permissions:
  contents: read

jobs:
  stack-list:
    runs-on: ubuntu-22.04
    outputs:
      stacks: ${{ steps.list-stacks.outputs.matrix }}
    steps:
      - id: list-stacks
        name: Generate list of stacks to sync based on input checkboxes
        run: |
          echo '## Stacks to sync' >> "$GITHUB_STEP_SUMMARY"
          set -o pipefail
          stacks=(${{ inputs.stack-heroku-20 == true && 'heroku-20' || ''}} ${{ inputs.stack-heroku-22 == true && 'heroku-22' || ''}})
          printf "%s\n" "${stacks[@]}" | xargs -n1 echo -  >> "$GITHUB_STEP_SUMMARY"
          echo -n "matrix=" >> "$GITHUB_OUTPUT"
          printf "%s\n" "${stacks[@]}" | jq -jcRn '[inputs|select(length>0)]' >> "$GITHUB_OUTPUT"
  docker-build:
    needs: stack-list
    if: ${{ needs.stack-list.outputs.stacks != '[]' && needs.stack-list.outputs.stacks != '' }}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        stack: ${{ fromJSON(needs.stack-list.outputs.stacks) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Restore cached Docker image
        id: restore-docker
        uses: actions/cache/restore@v3
        with:
          key: docker-cache-heroku-php-build-${{matrix.stack}}.${{github.sha}}
          path: /tmp/docker-cache.tar.gz
      - name: Load cached Docker image
        if: steps.restore-docker.outputs.cache-hit == 'true'
        run: docker load -i /tmp/docker-cache.tar.gz
      - name: Build Docker image
        if: steps.restore-docker.outputs.cache-hit != 'true'
        run: docker build --tag heroku-php-build-${{matrix.stack}}:${{github.sha}} --file support/build/_docker/${{matrix.stack}}.Dockerfile .
      - name: Save built Docker image
        if: steps.restore-docker.outputs.cache-hit != 'true'
        run: docker save heroku-php-build-${{matrix.stack}}:${{github.sha}} | gzip -1 > /tmp/docker-cache.tar.gz
      - name: Cache built Docker image
        if: steps.restore-docker.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          key: ${{ steps.restore-docker.outputs.cache-primary-key }}
          path: /tmp/docker-cache.tar.gz
  sync:
    needs: [stack-list, docker-build]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        stack: ${{ fromJSON(needs.stack-list.outputs.stacks) }}
    env:
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Restore cached Docker build
        uses: actions/cache/restore@v3
        with:
          key: docker-cache-heroku-php-build-${{matrix.stack}}.${{github.sha}}
          path: /tmp/docker-cache.tar.gz
      - name: Load cached Docker image
        run: docker load -i /tmp/docker-cache.tar.gz
      - name: ${{ inputs.dry-run == true && 'Dry-run sync of' || 'Sync' }} changed packages to production bucket
        run: |
          # we want to fail if 'docker run' fails; without this, 'tee' would "eat" the failure status
          set -o pipefail
          # yes gets "n" to print for dry-runs so the sync aborts
          # errors are redirected to /dev/null, and we || true, to suppress SIGPIPE errors from 'docker run' exiting eventually
          # we need -i for Docker to accept input on stdin, but must not use -t for the pipeline to work
          (yes "${{ inputs.dry-run == true && 'n' || 'y' }}" 2>/dev/null || true) | docker run --rm -i --env-file=support/build/_docker/env.default heroku-php-build-${{matrix.stack}}:${{github.sha}} sync.sh lang-php dist-${{matrix.stack}}-stable/ 2>&1 | tee sync.out
      - name: Output job summary
        run: |
          echo '## Package changes ${{ inputs.dry-run == true && 'available for syncing' || 'synced' }} to ${{matrix.stack}} production bucket' >> "$GITHUB_STEP_SUMMARY"
          echo "${{ inputs.dry-run == true && '**This is output from a dry-run**, no changes have been synced to production:' || '-n' }}" >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          sed -n '/The following packages will/,$p' sync.out >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
